!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AIO	perf.c	113;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
DEBUG	perf_kernel.c	63;"	d	file:
DEBUG_FSYNC	perf_kernel.c	65;"	d	file:
DEBUG_TIME	perf_kernel.c	64;"	d	file:
DEINIT_IOM	perf.c	26;"	d	file:
ERROR	perf_kernel.c	61;"	d	file:
FNAME_SIZE	perf_kernel.c	392;"	d	file:
GB	perf.c	32;"	d	file:
GB	perf_kernel.c	44;"	d	file:
GIGA_BYTES	perf_kernel.c	49;"	d	file:
IS_CREATE	perf.c	42;"	d	file:
IS_CREATE	perf_kernel.c	34;"	d	file:
IS_MKDIR	perf.c	44;"	d	file:
IS_MKDIR	perf_kernel.c	36;"	d	file:
IS_NOTHING	perf.c	38;"	d	file:
IS_NOTHING	perf_kernel.c	30;"	d	file:
IS_OP	perf_kernel.c	38;"	d	file:
IS_OPEN_CLOSE	perf.c	39;"	d	file:
IS_OPEN_CLOSE	perf_kernel.c	31;"	d	file:
IS_READDIR	perf.c	40;"	d	file:
IS_READDIR	perf_kernel.c	32;"	d	file:
IS_RENAME	perf.c	43;"	d	file:
IS_RENAME	perf_kernel.c	35;"	d	file:
IS_RMDIR	perf.c	45;"	d	file:
IS_RMDIR	perf_kernel.c	37;"	d	file:
IS_UNLINK	perf.c	41;"	d	file:
IS_UNLINK	perf_kernel.c	33;"	d	file:
KB	perf_kernel.c	42;"	d	file:
KILO_BYTES	perf_kernel.c	51;"	d	file:
MB	perf.c	31;"	d	file:
MB	perf_kernel.c	43;"	d	file:
MEGA_BYTES	perf_kernel.c	50;"	d	file:
NUM_ELEMENTS	perf.c	29;"	d	file:
NVFUSE_LIBS	Makefile	/^NVFUSE_LIBS := $(NVFUSE_ROOT_DIR)\/nvfuse.a$/;"	m
NVFUSE_ROOT_DIR	Makefile	/^NVFUSE_ROOT_DIR := $(abspath $(CURDIR)\/..\/..)$/;"	m
OBJS	Makefile	/^OBJS=$(SRCS:.c=.o)$/;"	m
RANDOM	perf.c	35;"	d	file:
SEQUENTIAL	perf.c	36;"	d	file:
SRCS	Makefile	/^SRCS   = perf.o$/;"	m
SUCCESS	perf_kernel.c	60;"	d	file:
SYNC	perf.c	114;"	d	file:
TARGET	Makefile	/^TARGET = perf $/;"	m
TB	perf.c	33;"	d	file:
TB	perf_kernel.c	45;"	d	file:
TERA_BYTES	perf_kernel.c	48;"	d	file:
UMOUNT	perf.c	27;"	d	file:
__int64	perf_kernel.c	53;"	d	file:
_perf_metadata	perf_kernel.c	/^int _perf_metadata(char* str,int meta_check,int count)$/;"	f
main	perf.c	/^int main(int argc, char *argv[])$/;"	f
main	perf_kernel.c	/^int main(int argc, char *argv[])$/;"	f
op_list	perf_kernel.c	/^char *op_list[IS_OP] = {"nothing", "open_close","readdir", "unlink","creat", "rename", "mkdir", "rmdir"};$/;"	v
perf_aio	perf.c	/^int perf_aio(struct nvfuse_handle *nvh, s64 file_size, s32 block_size, s32 is_rand, s32 is_read, s32 direct, s32 qdepth)$/;"	f
perf_kernel_usage	perf_kernel.c	/^void perf_kernel_usage(char *cmd)$/;"	f
perf_metadata	perf.c	/^static int perf_metadata(struct nvfuse_handle *nvh, s32 meta_check, s32 count)$/;"	f	file:
perf_metadata	perf_kernel.c	/^static int perf_metadata(s32 meta_check, s32 count)$/;"	f	file:
perf_usage	perf.c	/^void perf_usage(char *cmd)$/;"	f
print_timeval	perf_kernel.c	/^int print_timeval(struct timeval *tv, struct timeval *tv_end, int op_index){$/;"	f
s32	perf_kernel.c	/^typedef signed int s32;$/;"	t	file:
s64	perf_kernel.c	/^typedef signed long long s64;$/;"	t	file:
s8	perf_kernel.c	/^typedef signed char s8;$/;"	t	file:
u32	perf_kernel.c	/^typedef unsigned int u32;$/;"	t	file:
u64	perf_kernel.c	/^typedef unsigned long long u64;$/;"	t	file:
